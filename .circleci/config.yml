version: 2

aliases:
  - &update
    run:
      name: Update
      command: "apt-get update"

  - &update-backports
    run:
      name: "Add stretch-backports && Update"
      command: |
          echo "deb http://ftp.debian.org/debian stretch-backports main" >> /etc/apt/sources.list
          apt-get update

  - &install-ruby
    run:
      name: Install Ruby
      command: 'apt-get install -y ruby ruby-dev'

  - &install-ruby-backports
    run:
      name: Install Ruby from stretch-backports
      command: |
          apt-get -t stretch-backports install -y --no-install-recommends ruby-build
          ruby-build --definitions
          ruby-build 2.3.4

  - &install-cmake
    run:
      name: Install CMake
      command: 'apt-get install -y cmake'

  - &install-cmake-backports
    run:
      name: Install CMake from stretch-backports
      command: 'apt-get -t stretch-backports install -y --no-install-recommends cmake'

  - &install-cmake-homebrew
    run:
      name: Install CMake
      command: 'brew install cmake'

  - &update-submodules
    run:
      name: Update submodules
      command: 'git submodule update --init --recursive'

  - &install-bundle
    run:
      name: Install integration test dependencies
      command: |
        gem uninstall bundler
        gem install bundler -v 1.10.3
        bundle install --path vendor/bundle

  - &install-valgrind
    run:
      name: Install valgrind
      command: "apt-get install -y valgrind"

  - &build-unix-release
    run:
      name: Build and test
      command: ctest -j4 -S cmake/unix_multi.cmake -DCTEST_BUILD_TYPE=Release -DCTEST_BUILD_NAME="$(c++ --version | head -n1)"

  - &build-unix-debug
    run:
      name: Build and test
      command: ctest -j4 -S cmake/unix_multi.cmake -DCTEST_BUILD_TYPE=Debug -DCTEST_BUILD_NAME="$(c++ --version | head -n1)"

  - &test-unix-release-backports
    working_directory: /tmp/drafter
    environment:
    steps:
      - <<: *update-backports
      - <<: *install-cmake-backports
      - checkout
      - <<: *update-submodules
      - <<: *install-ruby
      - <<: *install-bundle
      - <<: *build-unix-release

  - &test-unix-debug-backports
    working_directory: /tmp/drafter
    environment:
    steps:
      - <<: *update-backports
      - <<: *install-cmake-backports
      - checkout
      - <<: *update-submodules
      - <<: *install-ruby
      - <<: *install-bundle
      - <<: *build-unix-debug

  - &test-unix-release
    working_directory: /tmp/drafter
    environment:
    steps:
      - <<: *update
      - <<: *install-cmake
      - checkout
      - <<: *update-submodules
      - <<: *install-ruby
      - <<: *install-bundle
      - <<: *build-unix-release

  - &test-unix-debug
    working_directory: /tmp/drafter
    environment:
    steps:
      - <<: *update
      - <<: *install-cmake
      - checkout
      - <<: *update-submodules
      - <<: *install-ruby
      - <<: *install-bundle
      - <<: *build-unix-debug

  - &test-coverage
    working_directory: /tmp/drafter
    environment:
    steps:
      - <<: *update
      - <<: *install-cmake
      - checkout
      - <<: *update-submodules
      - <<: *install-ruby
      - <<: *install-bundle
      - run:
          name: Build and test
          command: ctest -j4 -S cmake/coverage.cmake 

  - &test-asan
    working_directory: /tmp/drafter
    environment:
    steps:
      - <<: *update
      - <<: *install-cmake
      - checkout
      - <<: *update-submodules
      - run:
          name: Build and test
          command: "ctest -j4 -S cmake/asan.cmake"

  - &test-ubsan
    working_directory: /tmp/drafter
    environment:
    steps:
      - <<: *update
      - <<: *install-cmake
      - checkout
      - <<: *update-submodules
      - run:
          name: Build and test
          command: "ctest -j4 -S cmake/ubsan.cmake"

  - &test-valgrind
    working_directory: /tmp/drafter
    environment:
    steps:
      - <<: *update
      - <<: *install-cmake
      - <<: *install-valgrind
      - checkout
      - <<: *update-submodules
      - run:
          name: Build and test
          command: ctest -j4 -S cmake/valgrind.cmake 

  - &test-xcode-debug
    working_directory: /tmp/drafter
    environment:
    steps:
      - <<: *install-cmake-homebrew
      - checkout
      - <<: *update-submodules
      - run:
          name: Install integration test dependencies
          command: sudo gem install bundler && bundle install --path vendor/bundle
      - <<: *build-unix-debug

  - &test-xcode-release
    working_directory: /tmp/drafter
    environment:
    steps:
      - <<: *install-cmake-homebrew
      - checkout
      - <<: *update-submodules
      - run:
          name: Install integration test dependencies
          command: sudo gem install bundler && bundle install --path vendor/bundle
      - <<: *build-unix-release

  - &tag-filter
    filters:
      tags:
        only: /^v.*/

workflows:
  version: 2

  drafter:
    jobs:
      - lint
      - test-gcc5-release: *tag-filter
      - test-gcc5-debug: *tag-filter
      - test-gcc8-release: *tag-filter
      - test-gcc8-debug: *tag-filter
      - test-gcc8-coverage: *tag-filter
      - test-gcc8-asan: *tag-filter
      - test-gcc8-ubsan: *tag-filter
      - test-gcc8-valgrind: *tag-filter
      - test-clang4-release: *tag-filter
      - test-clang4-debug: *tag-filter
      - test-clang6-release: *tag-filter
      - test-clang6-debug: *tag-filter
      - test-xcode9-release: *tag-filter
      - test-xcode9-debug: *tag-filter
      - release:
          requires:
            - test-gcc5-release
            - test-gcc5-debug
            - test-gcc8-release
            - test-gcc8-debug
            - test-gcc8-coverage
            - test-gcc8-asan
            - test-gcc8-ubsan
            - test-gcc8-valgrind
            - test-clang4-release
            - test-clang4-debug
            - test-clang6-release
            - test-clang6-debug
            - test-xcode9-release
            - test-xcode9-debug
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

jobs:
  lint:
    docker:
      - image: apiaryio/clang:5

    steps:
      - checkout
      - run: ./tools/clang-format-check.sh

  test-gcc5-release:
    <<: *test-unix-release
    docker:
      - image: gcc:5

  test-gcc5-debug:
    <<: *test-unix-debug
    docker:
      - image: gcc:5

  test-gcc8-release:
    <<: *test-unix-release
    docker:
      - image: gcc:7

  test-gcc8-debug:
    <<: *test-unix-debug
    docker:
      - image: gcc:7

  test-gcc8-coverage:
    <<: *test-coverage
    docker:
      - image: gcc:8

  test-gcc8-asan:
    <<: *test-asan
    docker:
      - image: gcc:8

  test-gcc8-ubsan:
    <<: *test-ubsan
    docker:
      - image: gcc:8

  test-gcc8-valgrind:
    <<: *test-valgrind
    docker:
      - image: gcc:8

  test-clang4-release:
    <<: *test-unix-release
    docker:
      - image: apiaryio/clang:4

  test-clang4-debug:
    <<: *test-unix-debug
    docker:
      - image: apiaryio/clang:4

  test-clang6-release:
    <<: *test-unix-release
    docker:
      - image: apiaryio/clang:6

  test-clang6-debug:
    <<: *test-unix-debug
    docker:
      - image: apiaryio/clang:6

  test-xcode9-debug:
    <<: *test-xcode-debug
    macos:
      xcode: "9.4.0"

  test-xcode9-release:
    <<: *test-xcode-release
    macos:
      xcode: "9.4.0"

  release:
    docker:
      - image: circleci/ruby:2.5.1
    working_directory: /tmp/drafter

    steps:
      - checkout
      - <<: *update-submodules
      - run: ./tools/release.sh
